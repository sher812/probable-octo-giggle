"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _uniqueId2 = _interopRequireDefault(require("lodash/uniqueId"));

var _partition4 = _interopRequireDefault(require("lodash/partition"));

var _get2 = _interopRequireDefault(require("lodash/get"));

var _components = require("@sanity/base/components");

var _ui = require("@sanity/ui");

var _ChangeIndicator = require("@sanity/base/lib/change-indicators/ChangeIndicator");

var _icons = require("@sanity/icons");

var _HotspotImage = _interopRequireDefault(require("@sanity/imagetool/HotspotImage"));

var _imagetool = _interopRequireDefault(require("@sanity/imagetool"));

var _react = _interopRequireDefault(require("react"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _presence = require("@sanity/base/presence");

var PathUtils = _interopRequireWildcard(require("@sanity/util/paths"));

var _styledComponents = _interopRequireDefault(require("styled-components"));

var _FormBuilderInput = require("../../../FormBuilderInput");

var _ImageToolInput = _interopRequireDefault(require("../ImageToolInput"));

var _PatchEvent = _interopRequireWildcard(require("../../../PatchEvent"));

var _UploadPlaceholder = _interopRequireDefault(require("../common/UploadPlaceholder"));

var _WithMaterializedReference = _interopRequireDefault(require("../../../utils/WithMaterializedReference"));

var _FileInputButton = require("../common/FileInputButton/FileInputButton");

var _styles = require("../common/styles");

var _UploadProgress = require("../common/UploadProgress");

var _image = require("./utils/image");

var _templateObject;

function _getRequireWildcardCache() { if (typeof WeakMap !== "function") return null; var cache = new WeakMap(); _getRequireWildcardCache = function _getRequireWildcardCache() { return cache; }; return cache; }

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } if (obj === null || typeof obj !== "object" && typeof obj !== "function") { return { default: obj }; } var cache = _getRequireWildcardCache(); if (cache && cache.has(obj)) { return cache.get(obj); } var newObj = {}; var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor; for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null; if (desc && (desc.get || desc.set)) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } newObj.default = obj; if (cache) { cache.set(obj, newObj); } return newObj; }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _slicedToArray(arr, i) { return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest(); }

function _nonIterableRest() { throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method."); }

function _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === "string") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === "Object" && o.constructor) n = o.constructor.name; if (n === "Map" || n === "Set") return Array.from(o); if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }

function _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }

function _iterableToArrayLimit(arr, i) { if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return; var _arr = []; var _n = true; var _d = false; var _e = undefined; try { for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) { _arr.push(_s.value); if (i && _arr.length === i) break; } } catch (err) { _d = true; _e = err; } finally { try { if (!_n && _i["return"] != null) _i["return"](); } finally { if (_d) throw _e; } } return _arr; }

function _arrayWithHoles(arr) { if (Array.isArray(arr)) return arr; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _taggedTemplateLiteral(strings, raw) { if (!raw) { raw = strings.slice(0); } return Object.freeze(Object.defineProperties(strings, { raw: { value: Object.freeze(raw) } })); }

var HIDDEN_FIELDS = ['asset', 'hotspot', 'crop'];

var getDevicePixelRatio = () => {
  if (typeof window === 'undefined' || !window.devicePixelRatio) {
    return 1;
  }

  return Math.round(Math.max(1, window.devicePixelRatio));
};

var ImageRatio = _styledComponents.default.div(_templateObject || (_templateObject = _taggedTemplateLiteral(["\n  position: relative;\n  padding-bottom: calc(2 / 3 * 100%);\n\n  & > div {\n    position: absolute;\n    top: 1px;\n    left: 1px;\n    right: 1px;\n    bottom: 1px;\n  }\n"])));

function ImageInputField(props) {
  var onChange = props.onChange,
      field = props.field,
      restProps = _objectWithoutProperties(props, ["onChange", "field"]);

  var handleChange = _react.default.useCallback(ev => {
    onChange(ev.prefixAll(field.name));
  }, [onChange, field]);

  return /*#__PURE__*/_react.default.createElement(_FormBuilderInput.FormBuilderInput, _extends({}, restProps, {
    type: field.type,
    path: PathUtils.pathFor([field.name]),
    onChange: handleChange
  }));
}

class ImageInput extends _react.default.PureComponent {
  constructor() {
    super(...arguments);

    _defineProperty(this, "_inputId", (0, _uniqueId2.default)('ImageInput'));

    _defineProperty(this, "_focusRef", null);

    _defineProperty(this, "uploadSubscription", void 0);

    _defineProperty(this, "state", {
      isUploading: false,
      isAdvancedEditOpen: false,
      selectedAssetSource: null,
      hoveringFiles: []
    });

    _defineProperty(this, "toast", null);

    _defineProperty(this, "setFocusElement", el => {
      this._focusRef = el;
    });

    _defineProperty(this, "getConstrainedImageSrc", assetDocument => {
      var materializedSize = _imagetool.default.maxWidth || 1000;
      var maxSize = materializedSize * getDevicePixelRatio();
      var constrainedSrc = "".concat(assetDocument.url, "?w=").concat(maxSize, "&h=").concat(maxSize, "&fit=max");
      return constrainedSrc;
    });

    _defineProperty(this, "getUploadOptions", file => {
      var _this$props = this.props,
          type = _this$props.type,
          resolveUploader = _this$props.resolveUploader;
      var uploader = resolveUploader && resolveUploader(type, file);
      return uploader ? [{
        type: type,
        uploader
      }] : [];
    });

    _defineProperty(this, "handleRemoveButtonClick", () => {
      var getValuePath = this.context.getValuePath;
      var value = this.props.value;
      var parentPathSegment = getValuePath().slice(-1)[0]; // String path segment mean an object path, while a number or a
      // keyed segment means we're a direct child of an array

      var isArrayElement = typeof parentPathSegment !== 'string'; // When removing the image, we should also remove any crop and hotspot
      // _type and _key are "meta"-properties and are not significant unless
      // other properties are present. Thus, we want to remove the entire
      // "container" object if these are the only properties present, BUT
      // only if we're not an array element, as removing the array element
      // will close the selection dialog. Instead, when closing the dialog,
      // the array logic will check for an "empty" value and remove it for us

      var allKeys = Object.keys(value || {});
      var remainingKeys = allKeys.filter(key => !['_type', '_key', '_upload', 'asset', 'crop', 'hotspot'].includes(key));
      var isEmpty = remainingKeys.length === 0;
      var removeKeys = ['asset'].concat(allKeys.filter(key => ['crop', 'hotspot', '_upload'].includes(key))).map(key => (0, _PatchEvent.unset)([key]));
      this.props.onChange(_PatchEvent.default.from(isEmpty && !isArrayElement ? (0, _PatchEvent.unset)() : removeKeys));
    });

    _defineProperty(this, "handleFieldChange", event => {
      var _this$props2 = this.props,
          onChange = _this$props2.onChange,
          type = _this$props2.type;
      onChange(event.prepend((0, _PatchEvent.setIfMissing)({
        _type: type.name
      })));
    });

    _defineProperty(this, "handleStartAdvancedEdit", () => {
      this.setState({
        isAdvancedEditOpen: true
      });
    });

    _defineProperty(this, "handleStopAdvancedEdit", () => {
      this.setState({
        isAdvancedEditOpen: false
      });
    });

    _defineProperty(this, "handleSelectAssetFromSource", assetFromSource => {
      var _this$props3 = this.props,
          onChange = _this$props3.onChange,
          type = _this$props3.type,
          resolveUploader = _this$props3.resolveUploader;

      if (!assetFromSource) {
        throw new Error('No asset given');
      }

      if (!Array.isArray(assetFromSource) || assetFromSource.length === 0) {
        throw new Error('Returned value must be an array with at least one item (asset)');
      }

      var firstAsset = assetFromSource[0];
      var originalFilename = (0, _get2.default)(firstAsset, 'assetDocumentProps.originalFilename');
      var label = (0, _get2.default)(firstAsset, 'assetDocumentProps.label');
      var title = (0, _get2.default)(firstAsset, 'assetDocumentProps.title');
      var description = (0, _get2.default)(firstAsset, 'assetDocumentProps.description');
      var creditLine = (0, _get2.default)(firstAsset, 'assetDocumentProps.creditLine');
      var source = (0, _get2.default)(firstAsset, 'assetDocumentProps.source');

      switch (firstAsset.kind) {
        case 'assetDocumentId':
          onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
            _type: type.name
          }), (0, _PatchEvent.unset)(['hotspot']), (0, _PatchEvent.unset)(['crop']), (0, _PatchEvent.set)({
            _type: 'reference',
            _ref: firstAsset.value
          }, ['asset'])]));
          break;

        case 'file':
          {
            var uploader = resolveUploader(type, firstAsset.value);

            if (uploader) {
              this.uploadWith(uploader, firstAsset.value, {
                label,
                title,
                description,
                creditLine,
                source
              });
            }

            break;
          }

        case 'base64':
          (0, _image.base64ToFile)(firstAsset.value, originalFilename).then(file => {
            var uploader = resolveUploader(type, file);

            if (uploader) {
              this.uploadWith(uploader, file, {
                label,
                title,
                description,
                creditLine,
                source
              });
            }
          });
          break;

        case 'url':
          (0, _image.urlToFile)(firstAsset.value, originalFilename).then(file => {
            var uploader = resolveUploader(type, file);

            if (uploader) {
              this.uploadWith(uploader, file, {
                label,
                title,
                description,
                creditLine,
                source
              });
            }
          });
          break;

        default:
          {
            throw new Error('Invalid value returned from asset source plugin');
          }
      }

      this.setState({
        selectedAssetSource: null
      });
    });

    _defineProperty(this, "handleFileTargetFocus", () => {
      this.props.onFocus(['asset']);
    });

    _defineProperty(this, "handleFileTargetBlur", () => {
      this.props.onBlur();
    });

    _defineProperty(this, "handleFilesOver", hoveringFiles => {
      this.setState({
        hoveringFiles
      });
    });

    _defineProperty(this, "handleFilesOut", () => {
      this.setState({
        hoveringFiles: []
      });
    });

    _defineProperty(this, "handleCancelUpload", () => {
      this.cancelUpload();
    });

    _defineProperty(this, "handleClearUploadState", () => {
      this.clearUploadStatus();
    });

    _defineProperty(this, "handleSelectFiles", files => this.uploadFirstAccepted(files));

    _defineProperty(this, "handleSelectImageFromAssetSource", source => {
      this.setState({
        selectedAssetSource: source
      });
    });

    _defineProperty(this, "handleAssetSourceClosed", () => {
      this.setState({
        selectedAssetSource: null
      });
    });

    _defineProperty(this, "renderMaterializedAsset", assetDocument => {
      var _this$props$value = this.props.value,
          value = _this$props$value === void 0 ? {} : _this$props$value;
      var constrainedSrc = this.getConstrainedImageSrc(assetDocument);
      var srcAspectRatio = (0, _get2.default)(assetDocument, 'metadata.dimensions.aspectRatio');
      return typeof srcAspectRatio === 'undefined' ? null : /*#__PURE__*/_react.default.createElement(_HotspotImage.default, {
        aspectRatio: "auto",
        src: constrainedSrc,
        srcAspectRatio: srcAspectRatio,
        hotspot: value.hotspot,
        crop: value.crop
      });
    });

    _defineProperty(this, "setToast", toast => {
      this.toast = toast;
    });
  }

  focus() {
    if (this._focusRef) {
      this._focusRef.focus();
    }
  }

  isImageToolEnabled() {
    return (0, _get2.default)(this.props.type, 'options.hotspot') === true;
  }

  clearUploadStatus() {
    // todo: this is kind of hackish
    this.props.onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['_upload'])]));
  }

  cancelUpload() {
    if (this.uploadSubscription) {
      this.uploadSubscription.unsubscribe();
      this.clearUploadStatus();
    }
  }

  uploadFirstAccepted(files) {
    var _this$props4 = this.props,
        resolveUploader = _this$props4.resolveUploader,
        type = _this$props4.type;
    var match = files.map(file => ({
      file,
      uploader: resolveUploader(type, file)
    })).find(result => result.uploader);

    if (match) {
      this.uploadWith(match.uploader, match.file);
    }
  }

  uploadWith(uploader, file) {
    var assetDocumentProps = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};
    var _this$props5 = this.props,
        type = _this$props5.type,
        onChange = _this$props5.onChange;
    var label = assetDocumentProps.label,
        title = assetDocumentProps.title,
        description = assetDocumentProps.description,
        creditLine = assetDocumentProps.creditLine,
        source = assetDocumentProps.source;
    var options = {
      metadata: (0, _get2.default)(type, 'options.metadata'),
      storeOriginalFilename: (0, _get2.default)(type, 'options.storeOriginalFilename'),
      label,
      title,
      description,
      creditLine,
      source
    };
    this.cancelUpload();
    this.setState({
      isUploading: true
    });
    onChange(_PatchEvent.default.from([(0, _PatchEvent.setIfMissing)({
      _type: type.name
    })]));
    this.uploadSubscription = uploader.upload(file, type, options).subscribe({
      next: uploadEvent => {
        if (uploadEvent.patches) {
          onChange(_PatchEvent.default.from(uploadEvent.patches));
        }
      },
      error: err => {
        var _this$toast;

        // eslint-disable-next-line no-console
        console.error(err);
        (_this$toast = this.toast) === null || _this$toast === void 0 ? void 0 : _this$toast.push({
          status: 'error',
          description: 'The upload could not be completed at this time.',
          title: 'Upload failed'
        });
        this.clearUploadStatus();
      },
      complete: () => {
        onChange(_PatchEvent.default.from([(0, _PatchEvent.unset)(['hotspot']), (0, _PatchEvent.unset)(['crop'])]));
        this.setState({
          isUploading: false
        }); // this.toast.push({
        //   status: 'success',
        //   title: 'Upload completed',
        // })
      }
    });
  }

  hasFileTargetFocus() {
    var _this$props$focusPath;

    return ((_this$props$focusPath = this.props.focusPath) === null || _this$props$focusPath === void 0 ? void 0 : _this$props$focusPath[0]) === 'asset';
  }

  renderAdvancedEdit(fields) {
    var _this$props6 = this.props,
        value = _this$props6.value,
        level = _this$props6.level,
        type = _this$props6.type,
        onChange = _this$props6.onChange,
        readOnly = _this$props6.readOnly,
        materialize = _this$props6.materialize;
    var withImageTool = this.isImageToolEnabled() && value && value.asset;
    return /*#__PURE__*/_react.default.createElement(_ui.Dialog, {
      header: "Edit details",
      position: "absolute",
      id: "".concat(this._inputId, "_dialog"),
      onClose: this.handleStopAdvancedEdit,
      width: 1
    }, /*#__PURE__*/_react.default.createElement(_presence.PresenceOverlay, null, /*#__PURE__*/_react.default.createElement(_ui.Box, {
      padding: 4
    }, /*#__PURE__*/_react.default.createElement(_ui.Stack, {
      space: 5
    }, withImageTool && /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
      materialize: materialize,
      reference: value === null || value === void 0 ? void 0 : value.asset
    }, imageAsset => /*#__PURE__*/_react.default.createElement(_ImageToolInput.default, {
      type: type,
      level: level,
      readOnly: Boolean(readOnly),
      imageUrl: this.getConstrainedImageSrc(imageAsset),
      value: value,
      onChange: onChange
    })), this.renderFields(fields)))));
  }

  renderFields(fields) {
    return fields.map(field => this.renderField(field));
  }

  renderField(field) {
    var _this$props7 = this.props,
        value = _this$props7.value,
        level = _this$props7.level,
        focusPath = _this$props7.focusPath,
        onFocus = _this$props7.onFocus,
        readOnly = _this$props7.readOnly,
        onBlur = _this$props7.onBlur,
        presence = _this$props7.presence,
        markers = _this$props7.markers;
    var fieldValue = value === null || value === void 0 ? void 0 : value[field.name];
    var fieldMarkers = markers.filter(marker => marker.path[0] === field.name);
    return /*#__PURE__*/_react.default.createElement(ImageInputField, {
      key: field.name,
      field: field,
      value: fieldValue,
      onChange: this.handleFieldChange,
      onFocus: onFocus,
      onBlur: onBlur,
      readOnly: Boolean(readOnly || field.type.readOnly),
      focusPath: focusPath,
      level: level,
      presence: presence,
      markers: fieldMarkers
    });
  }

  renderAsset() {
    var _this$props8 = this.props,
        value = _this$props8.value,
        materialize = _this$props8.materialize;
    return /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
      reference: value.asset,
      materialize: materialize
    }, this.renderMaterializedAsset);
  }

  renderUploadPlaceholder() {
    var readOnly = this.props.readOnly;
    return readOnly ? /*#__PURE__*/_react.default.createElement(_ui.Text, {
      align: "center",
      muted: true
    }, "This field is read-only") : /*#__PURE__*/_react.default.createElement(_UploadPlaceholder.default, {
      fileType: "image"
    });
  }

  renderUploadState(uploadState) {
    var isUploading = this.state.isUploading;
    return /*#__PURE__*/_react.default.createElement(_UploadProgress.UploadProgress, {
      uploadState: uploadState,
      onCancel: isUploading ? this.handleCancelUpload : undefined,
      onClearStale: this.handleClearUploadState
    });
  }

  renderSelectImageButton() {
    var assetSources = this.props.assetSources;

    if (!(assetSources !== null && assetSources !== void 0 && assetSources.length)) {
      return null;
    } // If multiple asset sources render a dropdown


    if (assetSources.length > 1) {
      return /*#__PURE__*/_react.default.createElement(_ui.MenuButton, {
        id: "".concat(this._inputId, "_assetImageButton"),
        button: /*#__PURE__*/_react.default.createElement(_ui.Button, {
          mode: "ghost",
          text: "Select\u2026",
          icon: _icons.SearchIcon
        }),
        menu: /*#__PURE__*/_react.default.createElement(_ui.Menu, null, assetSources.map(assetSource => {
          return /*#__PURE__*/_react.default.createElement(_ui.MenuItem, {
            key: assetSource.name,
            text: assetSource.title,
            onClick: () => this.handleSelectImageFromAssetSource(assetSource),
            icon: assetSource.icon || _icons.ImageIcon
          });
        }))
      });
    } // Single asset source (just a normal button)


    return /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: _icons.SearchIcon,
      onClick: () => this.handleSelectImageFromAssetSource(assetSources[0]),
      mode: "ghost",
      text: "Select"
    });
  }

  renderAssetSource() {
    var selectedAssetSource = this.state.selectedAssetSource;
    var _this$props9 = this.props,
        value = _this$props9.value,
        materialize = _this$props9.materialize;

    if (!selectedAssetSource) {
      return null;
    }

    var Component = selectedAssetSource.component;

    if (value && value.asset) {
      return /*#__PURE__*/_react.default.createElement(_WithMaterializedReference.default, {
        materialize: materialize,
        reference: value.asset
      }, imageAsset => {
        return /*#__PURE__*/_react.default.createElement(Component, {
          selectedAssets: [imageAsset],
          selectionType: "single",
          onClose: this.handleAssetSourceClosed,
          onSelect: this.handleSelectAssetFromSource
        });
      });
    }

    return /*#__PURE__*/_react.default.createElement(Component, {
      selectedAssets: [],
      selectionType: "single",
      onClose: this.handleAssetSourceClosed,
      onSelect: this.handleSelectAssetFromSource
    });
  }

  render() {
    var _value$asset, _compareValue$asset, _value$asset2, _compareValue$asset2;

    var _this$props10 = this.props,
        type = _this$props10.type,
        value = _this$props10.value,
        compareValue = _this$props10.compareValue,
        level = _this$props10.level,
        markers = _this$props10.markers,
        readOnly = _this$props10.readOnly,
        presence = _this$props10.presence,
        directUploads = _this$props10.directUploads;
    var _this$state = this.state,
        isAdvancedEditOpen = _this$state.isAdvancedEditOpen,
        hoveringFiles = _this$state.hoveringFiles,
        selectedAssetSource = _this$state.selectedAssetSource;

    var _partition2 = (0, _partition4.default)(type.fields.filter(field => !HIDDEN_FIELDS.includes(field.name)), 'type.options.isHighlighted'),
        _partition3 = _slicedToArray(_partition2, 2),
        highlightedFields = _partition3[0],
        otherFields = _partition3[1];

    var accept = (0, _get2.default)(type, 'options.accept', 'image/*'); // Whoever is present at the asset field is who we show on the field itself

    var assetFieldPresence = presence.filter(item => item.path[0] === 'asset');
    var showAdvancedEditButton = value && (otherFields.length > 0 || (value === null || value === void 0 ? void 0 : value.asset) && this.isImageToolEnabled());
    return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, /*#__PURE__*/_react.default.createElement(_components.ImperativeToast, {
      ref: this.setToast
    }), /*#__PURE__*/_react.default.createElement(_components.FormFieldSet, {
      __unstable_markers: markers,
      __unstable_presence: assetFieldPresence,
      title: type.title,
      description: type.description,
      level: highlightedFields.length > 0 ? level : 0,
      __unstable_changeIndicator: false
    }, /*#__PURE__*/_react.default.createElement("div", null, /*#__PURE__*/_react.default.createElement(_ChangeIndicator.ChangeIndicatorCompareValueProvider, {
      value: value === null || value === void 0 ? void 0 : (_value$asset = value.asset) === null || _value$asset === void 0 ? void 0 : _value$asset._ref,
      compareValue: compareValue === null || compareValue === void 0 ? void 0 : (_compareValue$asset = compareValue.asset) === null || _compareValue$asset === void 0 ? void 0 : _compareValue$asset._ref
    }, /*#__PURE__*/_react.default.createElement(_components.ChangeIndicatorWithProvidedFullPath, {
      path: [],
      hasFocus: this.hasFileTargetFocus(),
      value: value === null || value === void 0 ? void 0 : (_value$asset2 = value.asset) === null || _value$asset2 === void 0 ? void 0 : _value$asset2._ref,
      compareValue: compareValue === null || compareValue === void 0 ? void 0 : (_compareValue$asset2 = compareValue.asset) === null || _compareValue$asset2 === void 0 ? void 0 : _compareValue$asset2._ref
    }, /*#__PURE__*/_react.default.createElement(_styles.FileTarget, {
      tabIndex: readOnly ? undefined : 0,
      shadow: 1,
      disabled: readOnly === true,
      ref: this.setFocusElement,
      onFiles: this.handleSelectFiles,
      onFilesOver: this.handleFilesOver,
      onFilesOut: this.handleFilesOut,
      onFocus: this.handleFileTargetFocus,
      onBlur: this.handleFileTargetBlur,
      tone: "transparent"
    }, /*#__PURE__*/_react.default.createElement(ImageRatio, null, /*#__PURE__*/_react.default.createElement(_ui.Flex, {
      align: "center",
      justify: "center"
    }, (value === null || value === void 0 ? void 0 : value._upload) && this.renderUploadState(value._upload), !(value !== null && value !== void 0 && value._upload) && (value === null || value === void 0 ? void 0 : value.asset) && this.renderAsset(), !(value !== null && value !== void 0 && value._upload) && !(value !== null && value !== void 0 && value.asset) && this.renderUploadPlaceholder(), !(value !== null && value !== void 0 && value._upload) && !readOnly && hoveringFiles.length > 0 && /*#__PURE__*/_react.default.createElement(_styles.Overlay, null, "Drop to upload")))))), /*#__PURE__*/_react.default.createElement(_ui.Grid, {
      gap: 1,
      marginTop: 3,
      style: {
        gridTemplateColumns: 'repeat(auto-fit, minmax(100px, 1fr))'
      }
    }, !readOnly && directUploads && /*#__PURE__*/_react.default.createElement(_FileInputButton.FileInputButton, {
      icon: _icons.UploadIcon,
      mode: "ghost",
      onSelect: this.handleSelectFiles,
      accept: accept,
      text: "Upload"
    }), !readOnly && this.renderSelectImageButton(), showAdvancedEditButton && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      icon: readOnly ? _icons.EyeOpenIcon : _icons.EditIcon,
      mode: "ghost",
      onClick: this.handleStartAdvancedEdit,
      text: readOnly ? 'View details' : 'Edit details'
    }), (value === null || value === void 0 ? void 0 : value.asset) && !readOnly && /*#__PURE__*/_react.default.createElement(_ui.Button, {
      tone: "critical",
      mode: "ghost",
      icon: _icons.TrashIcon,
      onClick: this.handleRemoveButtonClick,
      text: "Remove"
    }))), highlightedFields.length > 0 && this.renderFields(highlightedFields), isAdvancedEditOpen && this.renderAdvancedEdit(otherFields), selectedAssetSource && this.renderAssetSource()));
  }

}

exports.default = ImageInput;

_defineProperty(ImageInput, "contextTypes", {
  getValuePath: _propTypes.default.func
});