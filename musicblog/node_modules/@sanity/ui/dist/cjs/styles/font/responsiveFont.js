"use strict";
var __spreadArray = (this && this.__spreadArray) || function (to, from) {
    for (var i = 0, il = from.length, j = to.length; i < il; i++, j++)
        to[j] = from[i];
    return to;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.fontSize = exports.responsiveFont = void 0;
var helpers_1 = require("../helpers");
/**
 * A utility function getting responsive font styles.
 * @beta Should not be used in production, as this might change.
 */
function responsiveFont(fontKey, props) {
    var $size = props.$size, $weight = props.$weight, theme = props.theme;
    var _a = theme.sanity, fonts = _a.fonts, media = _a.media;
    var _b = fonts[fontKey], family = _b.family, sizes = _b.sizes, weights = _b.weights;
    var fontWeight = ($weight && weights[$weight]) || weights.regular;
    // @todo: make this configurable
    var defaultSize = sizes[2];
    var base = {
        position: 'relative',
        fontFamily: family,
        fontWeight: fontWeight,
        padding: '1px 0',
        margin: 0,
        // '&:before': {
        //   content: '',
        //   display: 'block',
        //   height: 0,
        // },
        // '&:after': {
        //   content: '',
        //   display: 'block',
        //   height: 0,
        // },
        '&:not([hidden])': {
            display: 'block',
        },
    };
    var resp = helpers_1.responsive(media, helpers_1.getResponsiveProp($size), function (sizeIndex) {
        return fontSize(sizes[sizeIndex] || defaultSize);
    });
    return __spreadArray([base], resp);
}
exports.responsiveFont = responsiveFont;
function fontSize(size) {
    var negHeight = size.ascenderHeight + size.descenderHeight;
    var capHeight = size.lineHeight - negHeight;
    return {
        fontSize: helpers_1.rem(size.fontSize),
        lineHeight: helpers_1.rem(size.lineHeight),
        letterSpacing: helpers_1.rem(size.letterSpacing),
        transform: "translateY(" + helpers_1.rem(size.descenderHeight) + ")",
        '&:before': {
            marginTop: "calc(" + helpers_1.rem(0 - negHeight) + " - 1px)",
        },
        '&:after': {
            marginBottom: '-1px',
        },
        '& [data-sanity-icon]': {
            fontSize: helpers_1.rem(size.iconSize),
            margin: helpers_1.rem((capHeight - size.iconSize) / 2),
        },
    };
}
exports.fontSize = fontSize;
//# sourceMappingURL=responsiveFont.js.map