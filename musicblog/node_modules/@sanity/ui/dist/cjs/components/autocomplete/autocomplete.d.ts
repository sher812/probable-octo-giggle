import React from 'react';
import { ButtonProps } from '../../primitives';
declare type OpenButtonProps = Omit<ButtonProps, 'as'> & Omit<React.HTMLProps<HTMLButtonElement>, 'as' | 'ref'>;
export interface BaseAutocompleteOption {
    value: string;
}
export interface AutocompleteProps<Option extends BaseAutocompleteOption> {
    border?: boolean;
    filterOption?: (query: string, option: Option) => boolean;
    fontSize?: number | number[];
    icon?: React.ComponentType | React.ReactNode;
    id: string;
    loading?: boolean;
    onChange?: (value: string) => void;
    onQueryChange?: (query: string | null) => void;
    onSelect?: (value: string) => void;
    /**
     * @beta
     */
    openButton?: boolean | OpenButtonProps;
    options?: Option[];
    padding?: number | number[];
    prefix?: React.ReactNode;
    radius?: number | number[];
    renderOption?: (option: Option) => React.ReactElement;
    renderValue?: (value: string, option?: Option) => string;
    suffix?: React.ReactNode;
    value?: string;
}
declare type AutocompleteOverriddenInputAttrKey = 'aria-activedescendant' | 'aria-autocomplete' | 'aria-expanded' | 'aria-owns' | 'as' | 'autoCapitalize' | 'autoComplete' | 'autoCorrect' | 'id' | 'inputMode' | 'onChange' | 'onSelect' | 'ref' | 'role' | 'spellCheck' | 'type' | 'value';
export declare const Autocomplete: <Option extends BaseAutocompleteOption>(props: AutocompleteProps<Option> & Omit<React.HTMLProps<HTMLInputElement>, AutocompleteOverriddenInputAttrKey> & {
    ref?: React.Ref<HTMLInputElement> | undefined;
}) => React.ReactElement;
export {};
//# sourceMappingURL=autocomplete.d.ts.map